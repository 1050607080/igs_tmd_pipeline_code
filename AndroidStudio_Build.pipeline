pipeline {
    agent any

    parameters {
        string(name: 'BUILDER_NAME', defaultValue: 'weitsunglin', description: '你的名字')
        choice(name: 'BUILD_MODE', choices: ['release', 'debug'], description: '編譯版本')
        choice(name: 'BUILD_TYPE', choices: ['aab', 'apk'], description: '編譯類型')
        choice(name: 'BUILD_ENV', choices: ['production', 'testing'], description: '編譯環境')
        string(name: 'VERSION_NAME', defaultValue: '1.1.175', description: 'versionName')
        string(name: 'VERSION_CODE', defaultValue: '1000249', description: 'versionCode')
    }

    environment {
        ANDROID_HOME = "/Users/tmd/Library/Android/sdk"
        ANDROID_STUDIO_PATH = "/Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android-studio"
        PROJ_ANDROID_PATH = "/Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android"
        INANNALUA_ENV_PATH = "/Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/assets/InannaLua/WebEnvironment.xml"
    }

    stages {
        stage('Setting project') {
            steps {
                script {
                    dir(PROJ_ANDROID_PATH) {
                         echo "Setting project"

                        def gradleFilePath = "${PROJ_ANDROID_PATH}/build.gradle"
                        
                        // read Gradle 文件内容
                        def gradleFile = new File(gradleFilePath)
                        def gradleContent = gradleFile.text

                        // 替换 versionName 和 versionCode
                        gradleContent = gradleContent.replaceAll(/versionName\s+".*"/, 'versionName "' + VERSION_NAME + '"')
                        gradleContent = gradleContent.replaceAll(/versionCode\s+\d+/, 'versionCode ' + VERSION_CODE)

                        gradleFile.write(gradleContent)
                        
                        echo "Set versionName to ${VERSION_NAME} and versionCode to ${VERSION_CODE}"
                    }
                }
            }
        }

        stage('Setting environment') {
            steps {
                script {
                    def filePath = INANNALUA_ENV_PATH
                    def fileContent = readFile(filePath)
                    def newContent = fileContent.replaceAll(/(<type>).*?(<\/type>)/, "\$1${params.BUILD_ENV}\$2")

                    writeFile(file: filePath, text: newContent)

                    echo "Updated WebEnvironment.xml to ${params.BUILD_ENV} environment."
                }
            }
        }

        stage('android studio build') {
            steps {
                script {
                    dir(ANDROID_STUDIO_PATH) {
                        try {
                            def buildCommand = ""
                            if (params.BUILD_TYPE == 'aab') {
                                buildCommand = "bundle${params.BUILD_MODE.capitalize()}"
                            } else {
                                buildCommand = "assemble${params.BUILD_MODE.capitalize()}"
                            }

                            sh """
                            export PATH=\$PATH:\$ANDROID_HOME/tools:\$ANDROID_HOME/platform-tools
                            ./gradlew clean ${buildCommand}
                            """
                        } 
                        catch (Exception e) {
                            echo "android studio build  error: ${e}"
                            throw e
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            emailext(
                subject: "androdi studio 編譯成功，版本為 ${params.BUILD_MODE}，類型為 ${params.BUILD_TYPE}",
                body: "編譯成功，路徑在:/Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/build/outputs 。",
                to: "${params.BUILDER_NAME}@igs.com.tw"
            )
        }
        failure {
            emailext(
                subject: "androdi studio 編譯失敗，怎辦，版本為 ${params.BUILD_MODE}，類型為 ${params.BUILD_TYPE}",
                body: "編譯失敗",
                to:  "${params.BUILDER_NAME}@igs.com.tw"
            )
        }
    }
}