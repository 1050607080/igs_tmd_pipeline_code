pipeline {
    agent any

    environment {
        PROJECT_WORKSPACE_PATH = "/Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.ios_mac/"
        SOUTHPARK_XCWORKSPACE = "/Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.ios_mac/SouthPark.xcworkspace"
        EXPORT_OPTION = "exportOptions.plist"
    }

    parameters {
        string(name: 'BUILDER_NAME', defaultValue: 'weitsunglin', description: '你的名字')
        choice(name: 'BUILD_TARGET', choices: ['SouthPark release', 'SouthPark debug package', 'SouthPark debug'], description: '選擇編譯TARGET')
        choice(name: 'BUILD_CONFIG', choices: ['Release', 'Debug'], description: '選擇編譯CONFIG')
        string(name: 'VERSION', defaultValue: '1.1.180', description: 'VERSION')
        string(name: 'BUILD', defaultValue: '1', description: 'BUILD')
    }
    
    stages {
        stage('ExportOption Setting') {
            steps {
                script {
                    if (params.BUILD_TARGET == 'SouthPark release') {
                        EXPORT_OPTION = "ExportOption_Release.plist"
                    } else if(params.BUILD_TARGET == 'SouthPark debug package') {
                        EXPORT_OPTION = "ExportOption_Test.plist"
                    } else if(params.BUILD_TARGET == 'SouthPark debug') {
                        EXPORT_OPTION = "ExportOption_Dev.plist"
                    }
                }
            }
        }

        stage('Xcode Clean') {
            steps {
                script {
                    dir(PROJECT_WORKSPACE_PATH){
                        try {
                            sh "xcodebuild clean -workspace SouthPark.xcworkspace -scheme '${params.BUILD_TARGET}' -configuration ${params.BUILD_CONFIG}"
                        } catch (Exception e) {
                            echo "Xcode Clean failed with error: ${e.message}"
                            throw e
                        }
                    }
                }
            }
        }

        stage('Version and Build Number Setting') {
            steps {
                script {
                    def projectPath = SOUTHPARK_XCWORKSPACE
                    def target = params.BUILD_TARGET

                    // 从参数获取新的市场版本号和构建号
                    def newMarketingVersion = params.VERSION
                    def newProjectVersion = params.BUILD

                    // 更新项目的版本号和构建号
                    sh "xcodebuild -project '${projectPath}' -target '${target}' MARKETING_VERSION='${newMarketingVersion}' CURRENT_PROJECT_VERSION='${newProjectVersion}'"
                    sh "xcodebuild -project '${projectPath}' -target 'PushService' MARKETING_VERSION='${newMarketingVersion}' CURRENT_PROJECT_VERSION='${newProjectVersion}'"
                    echo "Updated marketing version to ${newMarketingVersion} and project version to ${newProjectVersion}"
                }
            }
        }

        stage('Xcode Build') {
            steps {
                script {
                    dir(PROJECT_WORKSPACE_PATH){
                        try {
                            sh "xcodebuild -workspace SouthPark.xcworkspace -scheme '${params.BUILD_TARGET}' -configuration ${params.BUILD_CONFIG} -destination 'generic/platform=iOS' build"
                        } catch (Exception e) {
                            echo "Xcode Build failed with error: ${e.message}"
                            throw e
                        }
                    }
                }
            }
        }

        stage('Xcode Archive') {
            steps {
                script {
                    dir(PROJECT_WORKSPACE_PATH) {
                        try {
                            sh "xcodebuild -workspace SouthPark.xcworkspace -scheme '${params.BUILD_TARGET}' -sdk iphoneos -configuration ${params.BUILD_CONFIG} archive -archivePath ./build/SouthPark.xcarchive && xcodebuild -exportArchive -archivePath ./build/SouthPark.xcarchive -exportOptionsPlist ${EXPORT_OPTION} -exportPath ./build"
                        } catch (Exception e) {
                            echo "Xcode Archive failed with error: ${e.message}"
                            throw e 
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            emailext(
                subject: "Xcode 編譯成功，編譯TARGET為 ${params.BUILD_TARGET}",
                body: "編譯版本為 ${params.BUILD_TARGET}，輸出路徑: /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.ios_mac/build/",
                to: "${params.BUILDER_NAME}@igs.com.tw"
            )
        }
        failure {
            emailext(
                subject: "Xcode 編譯失敗了，怎辦，編譯TARGET為 ${params.BUILD_TARGET}",
                body: "編譯失敗",
                to: "${params.BUILDER_NAME}@igs.com.tw"
            )
        }
    }
}