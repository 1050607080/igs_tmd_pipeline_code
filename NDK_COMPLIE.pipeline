pipeline {
    agent any

    parameters {
        string(name: 'BUILDER_NAME', defaultValue: 'weitsunglin', description: '你的名字')
        choice(name: 'ANDROID_VERSION', choices: ['store', 'offical'], description: '底層版本')
    }

    stages {

        stage('Delete Resources') {
            steps {
                script {
                    sh "rm -rf /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/libs*"
                    sh "rm -rf /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/obj*"
                }
            }
        }

        stage('Build Prepare') {
            steps {
                script {
                    try {
                        def filePath = '/Users/tmd/Documents/tmd/Inanna/Android.mk'
                        def fileContent = readFile(filePath).split("\n")
                        def newContent = []
                        def officialBuild = params.ANDROID_VERSION == 'offical'

                        fileContent.each { line ->
                            if (line.contains("LOCAL_CFLAGS += -DOFFICIAL_VERSION")) {
                                if (officialBuild) {
                                    // 如果是官方版本且行被註釋，則取消註釋
                                    newContent.add(line.replaceFirst("##", ""))
                                } else {
                                    // 如果不是官方版本且行未被註釋，則註釋
                                    if (!line.startsWith("##")) {
                                        newContent.add("##" + line)
                                    } else {
                                        // 如果已經是註釋狀態，保持不變
                                        newContent.add(line)
                                    }
                                }
                            } else {
                                // 對於不符合條件的行，直接添加到新內容中
                                newContent.add(line)
                            }
                        }
                        writeFile(file: filePath, text: newContent.join("\n"))
                    } 
                    catch (Exception e) {
                        echo "Build Prepare with error: ${e.message}"
                        throw e
                    }
                }
            }
        }

        stage('Build NDK') {
            steps {
                script {
                    sh "/Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/build_release_jenkins.sh"
                }
            }
        }

        stage('Fix Resources Name') {
            steps {
                script {
                    if (params.ANDROID_VERSION == 'store') {
                        sh '''
                        mv /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/obj /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/obj_store
                        mv /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/libs /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/libs_store
                        '''
                    } else {
                        sh '''
                        mv /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/obj /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/obj_offical
                        mv /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/libs /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/libs_offical
                        '''
                    }

                }
            }
        }
    }

    post {
        success {
            emailext(
                subject: "ndk編譯底層成功，底層版本${params.ANDROID_VERSION}",
                body: "ndk編譯底層成功",
                to: "${params.BUILDER_NAME}@igs.com.tw"
            )
        }
        failure {
            emailext(
                subject: "ndk編譯底層失敗，底層版本${params.ANDROID_VERSION}",
                body: "ndk編譯底層失敗",
                to:  "${params.BUILDER_NAME}@igs.com.tw"
            )
        }
    }
}