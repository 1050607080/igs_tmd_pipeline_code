pipeline {
    agent any

    parameters {
        string(name: 'BUILDER_NAME', defaultValue: 'weitsunglin', description: '你的名字')
        choice(name: 'ANDROID_VERSION', choices: ['store', 'offical'], description: '底層版本')
    }

    stages {

        stage('Delete Resources') {
            steps {
                script {
                    echo"Delete libs & obj"
                    sh "rm -rf /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/libs*"
                    sh "rm -rf /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/obj*"
                }
            }
        }

        stage('Build Prepare') {
            steps {
                script {
                    echo "Build Prepare"

                    try {
                    def filePath = '/Users/tmd/Documents/tmd/Inanna/Android.mk'
                    def fileContent = readFile(filePath).split("\n")
                    def newContent = []
                    def androidVersion = params.ANDROID_VERSION

                    fileContent.each { line ->
                        if (line.trim().startsWith("##LOCAL_CFLAGS += -DOFFICIAL_VERSION")) {
                            if (androidVersion == 'offical') {
                                // 移除 ## 以反註解
                                newContent.add(line.trim().substring(2))
                            } else {
                                // 保持原樣
                                newContent.add(line)
                            }
                        } else if (line.trim().startsWith("LOCAL_CFLAGS += -DOFFICIAL_VERSION")) {
                            if (androidVersion == 'store') {
                                // 添加 ## 以註解
                                newContent.add("##" + line)
                            } else {
                                // 保持原樣
                                newContent.add(line)
                            }
                        } else {
                            // 對於不包含特定標記的行，保持原樣
                            newContent.add(line)
                        }
                    }

                    writeFile(file: filePath, text: newContent.join("\n"))

                    } catch (Exception e) {
                        echo "Build Prepare with error: ${e.message}"
                        throw e
                    }
                }
            }
        }

        stage('Build NDK') {
            steps {
                script {
                    echo"Build NDK"
                }
            }
        }

        stage('Copy Resources') {
            steps {
                script {
                    echo"Copy resources"
                }
            }
        }
    }

    post {
        success {
            emailext(
                subject: "ndk編譯底層成功，底層版本${params.ANDROID_VERSION}",
                body: "ndk編譯底層成功",
                to: "${params.BUILDER_NAME}@igs.com.tw"
            )
        }
        failure {
            emailext(
                subject: "ndk編譯底層失敗，底層版本${params.ANDROID_VERSION}",
                body: "ndk編譯底層失敗",
                to:  "${params.BUILDER_NAME}@igs.com.tw"
            )
        }
    }
}