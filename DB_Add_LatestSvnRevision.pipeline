pipeline {
    agent any

     environment {
        NEW_VERSION = "0.0.000"
    }

    parameters {
        string(name: 'NAME', defaultValue: 'weitsunglin', description: '你的名字')
        choice(name: 'DB_TYPE', choices: ['測試', '正式'], description: '選擇資料庫類型')
        string(name: 'VERSION', defaultValue: '1.1.180', description: '新版本號')
    }
    
    stages {
        stage('Ready to start') {
            steps {
                script {                    
                    // 版本號處理
                    def versionParts = params.VERSION.tokenize('.')
                    def major = versionParts[0] as int
                    def minor = versionParts[1] as int
                    def patch = (versionParts[2] as int) - 2 // 使用括號確保先進行類型轉換，然後減去2
                    NEW_VERSION = "${major}.${minor}.${patch}" // 將處理後的新版本號存儲到 env 中
                    echo "NEW_VERSION ${NEW_VERSION}"
                }
            }
        }
        stage('Modify DB') {
            steps {
                script {
                    if (params.DB_TYPE == '測試') {
                        echo "在測試資料庫上執行 SQL "
                    } else {
                        echo "在正式資料庫上執行 SQL "
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                if (currentBuild.result == 'SUCCESS') {
                    emailext(
                        subject: "SUCCESS Add ${params.DB_TYPE} DB LatestSvnRevision",
                        body: "SUCCESS",
                        to: "${params.NAME}@igs.com.tw"
                    )
                } 
                else {
                    emailext(
                        subject: "Failure Add ${params.DB_TYPE} DB LatestSvnRevision",
                        body: "Failure",
                        to: "${params.NAME}@igs.com.tw"
                    )
                }
            }
        }
    }
}