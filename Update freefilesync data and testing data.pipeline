pipeline {
    agent any

     parameters {
        string(name: 'BUILDER_NAME', defaultValue: 'weitsunglin', description: '你的名字')
        string(name: 'NEW_VERSION', defaultValue: '1.1.175', description: '新版本')
        choice(name: 'GAME_ENV', choices: ['Android', 'iOS'], description: '遊戲環境')
    }

    environment {
        REMOTE4055_CREDENTIALS ='remote4055_login'
        REMOTE4463_CREDENTIALS ='remote4463_login'
    }

    stages {
        stage('Update Version Info') {
            steps {
                script {
                    def filePath = '/Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/targetVersion.json'
                    
                    def versionsFile = readFile filePath
                    def versions = readJSON text: versionsFile

                    String platform = params.GAME_ENV
                    String newVersion = params.NEW_VERSION

                    if (versions.containsKey(platform)) {
                        if (!versions[platform].contains(newVersion)) {
                            versions[platform].add(newVersion)
                        } else {
                            echo "Version $newVersion already exists for $platform, not adding it again."
                        }
                    } else {
                        echo "Platform $platform does not exist."
                    }

                    def updatedVersions = writeJSON returnText: true, json: versions
                    writeFile file: filePath, text: updatedVersions

                    echo "Updated versions: ${versions}"
                }
            }
        }
        stage('ReplaceBatchFlie') {
            steps {
                script{
                    echo 'ReplaceBatchFlie'
                }
            }
        }
        stage('Move ffsBatch') {
            steps {
                script{
                    echo 'Move ffsBatch'
                }
            }
        }
    }

    post {
        always {
            emailext(
                subject: "${currentBuild.currentResult} Update freefilesync data and testing data",
                body: "${currentBuild.currentResult}, Update freefilesync data and testing data",
                to: "${params.BUILDER_NAME}@igs.com.tw"
            )
        }
    }
}

def getRemoteConfig(host, user, password) {
    def remote = [:]
    remote.name = user
    remote.host = host
    remote.user = user
    remote.password = password
    remote.allowAnyHosts = true
    return remote
}