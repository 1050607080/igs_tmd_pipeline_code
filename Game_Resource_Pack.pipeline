def SVN_URLS = []

pipeline {
    agent any

    environment {
        SVN_INSTALL_PATH = '/opt/homebrew/bin/svn'
        SVN_BASE_URL = 'http://192.168.1.183/svn/'
        CREDENTIALS_ID = '97731a4e-685d-4356-8c2b-d902c44ed6e9'
        PROJ_ANDROID_URL = "/Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/"
        TMD_RESOURCES_URL = "/Users/tmd/Documents/tmd/"
        BUILD_SHELL_FILE = ""
    }

    parameters {
        string(name: 'BUILDER_NAME', defaultValue: 'weitsunglin', description: '你的名字')
        choice(name: 'GAME_VERSION', choices: ['android', 'ios'], description: '遊戲版本')
        string(name: 'GAME_NAME', defaultValue: 'Cocos2d-x Inanna FishHunter', description: '遊戲名稱')
        booleanParam(name: 'ENCODE', defaultValue: true, description: '加密Lua')
        choice(name: 'MODE', choices: ['debug', 'release'], description: '打包模式')
    }

    stages {
        stage('Get Game SVN Path') {
            steps {
                script { 
                    dir( PROJ_ANDROID_URL ) {
                        def output = sh(script: "python3 read_google_sheet.py ${params.GAME_VERSION} ${params.GAME_NAME}", returnStdout: true).trim()
                        echo "版本路徑撈取: ${output}"
                        SVN_URLS = output.split('\n')
                    }
                }
            }
        }

        stage('Game Switch Path using SVN') {
            steps {
                script {
                    for( url in SVN_URLS ) {
                        def cleanedOutput = url.replaceAll("[\\[\\]' ]", "")
                        def elements = cleanedOutput.split(",")

                        def gameName = elements[0]
                        def gameUrl = elements[1]

                        echo "Game Name: ${gameName}"
                        echo "Game URL: ${gameUrl}"

                        dir( TMD_RESOURCES_URL + gameName + "/" ) {
                            withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'SVN_USER', passwordVariable: 'SVN_PASSWORD')]) {
                                echo "${gameName} 切换到 SVN URL: ${gameUrl}"
                                sh(script: "${SVN_INSTALL_PATH} switch ${gameUrl} --username \$SVN_USER --password \$SVN_PASSWORD")
                            }
                        }
                    }
                }
            }
        }

        
       stage('Lua Encode Dat') {
            when {
                expression { params.ENCODE == true }
            }
            steps {
                dir( PROJ_ANDROID_URL ) {
                    script { 
                        BUILD_SHELL_FILE = "Build_Release_Encode.sh" 
                        sh 'chmod +x /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/Build_Release_Encode.sh'
                    }
                }
            }
        }

        stage('Lua NOT Encode Dat') {
            when {
                expression { params.ENCODE == false }
            }
            steps {
                dir( PROJ_ANDROID_URL ) {
                    script{ 
                        BUILD_SHELL_FILE = "Build_Release_Decode.sh" 
                        sh 'chmod +x /Users/tmd/Documents/tmd/SouthPark/ClientCocos/proj.android/Build_Release_Decode.sh'
                    }
                }
            }
        }

        stage('Modify build-cfg-original.json') {
            steps {      
                script { 
                    def resourcesArray = []
                    
                    for(url in SVN_URLS) {
                        def cleanedOutput = url.replaceAll("[\\[\\]' ]", "")
                        def elements = cleanedOutput.split(",")
                        def gameName = elements[0]

                        if (gameName == "Cocos2d-x") {
                            resourcesArray.add("""
                            {
                                "from": "../../../${gameName}/cocos/scripting/lua-bindings/script",
                                "to": "cocos",
                                "zip": false
                            }
                            """.trim())
                        } 
                        else if (gameName == "Inanna"){
                            resourcesArray.add("""
                            {
                                "from": "../../../${gameName}/${gameName}Resource",
                                "to": "${gameName}Resource",
                                "zip": true
                            },
                            {
                                "from": "../../../${gameName}/${gameName}Lua",
                                "to": "${gameName}Lua",
                                "zip": true
                            }
                            """.trim())
                        }
                        else{
                            resourcesArray.add("""
                            {
                                "from": "../../../${gameName}/ClientCocos/${gameName}Resource",
                                "to": "${gameName}Resource",
                                "zip": true
                            },
                            {
                                "from": "../../../${gameName}/ClientCocos/${gameName}Lua",
                                "to": "${gameName}Lua",
                                "zip": true
                            }
                            """.trim())
                        }
                    }

                    def jsonContent = """{
                        "copy_resources": [
                            ${resourcesArray.join(",\n")}
                        ]
                    }"""

                    writeFile file: PROJ_ANDROID_URL+"build-cfg-original.json", text: jsonContent
                }
            }
        }

        stage('Packing') {
            steps {
                dir(PROJ_ANDROID_URL) {
                    script{
                        switch(params.MODE) {
                            case "debug":
                                sh "rm -rf /Users/tmd/Documents/tmd/SouthPark/ClientCocos/bin/debug/tmp*"
                                sh "./${BUILD_SHELL_FILE} debug"
                                break
                            case "release":
                                sh "rm -rf /Users/tmd/Documents/tmd/SouthPark/ClientCocos/bin/release/tmp*"
                                sh "./${BUILD_SHELL_FILE} release"
                                break
                            default:
                                error("Unknown MODE: ${params.MODE}")
                        }
                    }
                }
            }
        }

        stage('Move Assets') {
            // 使用when条件来判断是否为release模式
            when {
                // 检查params.MODE是否等于release
                expression { params.MODE == 'release' }
            }
            steps {
                dir(PROJ_ANDROID_URL) {
                    script {
                        // 由于已经通过when条件判断是release模式，这里只需要处理不同的GAME_VERSION
                        switch(params.GAME_VERSION) {
                            case "android":
                                sh "/path/to/move_and_update_android_assets.sh"
                                break
                            case "ios":
                                
                                break
                        }
                    }
                }
            }
        }

         stage('Clean Environment') {
            steps {
                script {
                    for(url in SVN_URLS) {
                        def cleanedOutput = url.replaceAll("[\\[\\]' ]", "")
                        def elements = cleanedOutput.split(",")
                        def gameName = elements[0]
                        def switch_url = "http://192.168.1.183/svn/"+gameName

                        if (gameName == "Cocos2d-x") {
                            switch_url = switch_url + "/3.17/trunk"
                        } 
                        else {
                            switch_url = switch_url + "/trunk"
                        }

                        dir(TMD_RESOURCES_URL+gameName+"/") {
                            withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'SVN_USER', passwordVariable: 'SVN_PASSWORD')]) {
                                echo "${gameName} 切回trunk"
                                sh(script: "${SVN_INSTALL_PATH} switch ${switch_url} --username \$SVN_USER --password \$SVN_PASSWORD")
                            }
                        }
                        
                        dir(PROJ_ANDROID_URL) {
                        script {
                            def svnRevertCmd = "${SVN_INSTALL_PATH} revert ${PROJ_ANDROID_URL + "build-cfg-original.json"}"
                            sh(svnRevertCmd)
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            emailext(
                subject: "遊戲資源打包: ${currentBuild.currentResult}",
                body: "打包結果: ${currentBuild.currentResult}，打包資源位置在(192.168.123.123): SouthPark\\ClientCocos\\bin\\${params.MODE}\\tmp\\",
                to: "${params.BUILDER_NAME}@igs.com.tw"
            )
        }
    }
}