pipeline {
    agent any

    parameters {
        string(name: 'NAME', defaultValue: 'weitsunglin', description: '你的名字')
        string(name: 'NEW_IOS_VERSION', defaultValue: '1.1.180', description: 'IOS新版本號')
    }

    //db-gt-test24.gametower.com.tw
     environment {
        MSSQL_SERVER = 'db-gt-test24.gametower.com.tw'
        MSSQL_DATABASE = 'GameTower2_TMD'
        TMD_DB = 'tmd_db'
        REMOTE_CREDENTIALS ='remote4463_login'
    }

    //def dbCommand = "sqlcmd -S ${MSSQL_SERVER} -d ${MSSQL_DATABASE} -U ${DB_ACCOUNT} -P ${DB_PASSWORD} -Q \"UPDATE Client_LatestSvnRevision SET revision = 100 WHERE deviceVersion = '${params.NEW_IOS_VERSION}'\""
    //def dbCommand = "sqlcmd -S ${MSSQL_SERVER} -d ${MSSQL_DATABASE} -U ${DB_ACCOUNT} -P ${DB_PASSWORD} -Q \"UPDATE Client_LatestSvnRevision SET revision = revision + 1 WHERE deviceVersion = '${params.NEW_IOS_VERSION}'\""

    
    stages {

         stage('Ready') {
            steps {
                script {
                    echo "DB (10.100.20.17) Modify Inanna Svn revision"
                }
            }
        }

        stage('DB Modify') {
            steps {
                script {
                    echo "DB (10.100.20.17) Modify Inanna Svn revision"
                    //REMOTE
                    withCredentials([usernamePassword(credentialsId: REMOTE_CREDENTIALS, passwordVariable: 'REMOTE_PASSWORD', usernameVariable: 'REMOTE_USER')]) {
                        def remote = getRemoteConfig("192.168.44.63", REMOTE_USER, REMOTE_PASSWORD)
                        //DB
                        withCredentials([usernamePassword(credentialsId: TMD_DB, usernameVariable: 'DB_ACCOUNT', passwordVariable: 'DB_PASSWORD')]) {
                            try {
                                //修正
                                def fix_dbCommand = "sqlcmd -S ${MSSQL_SERVER} -d ${MSSQL_DATABASE} -U ${DB_ACCOUNT} -P ${DB_PASSWORD} -Q \"UPDATE Client_LatestSvnRevision SET revision = revision - 1 WHERE deviceVersion = '${params.NEW_IOS_VERSION}'\""
                                sshCommand remote: remote, command: fix_dbCommand
                                //確認
                                def confirm_dbCommand = "sqlcmd -S ${MSSQL_SERVER} -d ${MSSQL_DATABASE} -U ${DB_ACCOUNT} -P ${DB_PASSWORD} -Q \"SELECT TOP 999 * FROM Client_LatestSvnRevision WHERE deviceVersion = '${params.NEW_IOS_VERSION}'\""
                                sshCommand remote: remote, command: confirm_dbCommand
                            } catch (Exception e) {
                                echo "Caught an exception: ${e.getMessage()}"
                            }
                        }
                        try {
                            sshCommand remote: remote, command: command
                        } catch (Exception e) {
                            echo "Caught an exception while executing another command: ${e.getMessage()}"
                        }
                    }
                }
            }
        }

    }
    
    post {
        always {
            script {
                if (currentBuild.result == 'SUCCESS') {
                    emailext(
                        subject: "SUCCESS Modify 10.100.20.17 IOS Inanna Svn revision",
                        body: "SUCCESS",
                        to: "${params.NAME}@igs.com.tw"
                    )
                } 
                else {
                    emailext(
                        subject: "Failure Modify 10.100.20.17 IOS Inanna Svn revision",
                        body: "Failure",
                        to: "${params.NAME}@igs.com.tw"
                    )
                }
                //LINE NOTIFY
                withCredentials([usernamePassword(credentialsId: "line_notify", usernameVariable: '_', passwordVariable: 'line_token')]) {
                    sh """
                    curl -X POST -H 'Authorization: Bearer ${line_token}' -F "message=name: ${params.NAME} ${currentBuild.currentResult} modify 10.100.20.17 db ios Inanna Svn revision" https://notify-api.line.me/api/notify
                    """
                }
            }
        }
    }
}

def getRemoteConfig(host, user, password) {
    def remote = [:]
    remote.name = user
    remote.host = host
    remote.user = user
    remote.password = password
    remote.allowAnyHosts = true
    return remote
}