pipeline {
    agent any

    // 定義環境變量
    environment {
        // 假定已經在 Jenkins 中設定好的 Credentials ID
        CREDENTIALS_ID = 'remote44102_login'
    }

    parameters {
        string(name: 'NAME', defaultValue: 'weitsunglin', description: '你的名字')
        choice(name: 'ENVIRONMENT_TYPE', choices: ['production', 'iostesting'], description: '環境類型')
        booleanParam(name: 'DEPLOY_TO_CDN', defaultValue: true, description: '是否發布到CDN')
        booleanParam(name: 'DEPLOY_TO_GCP', defaultValue: true, description: '是否發布到GCP')
    }

    stages {
        stage('Prepare') {
            steps {
                echo "Ready"
            }
        }

        stage('Fix Web Environment') {
            steps {
                script {
                    // 使用 withCredentials 包裝 sshCommand，確保敏感信息安全
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
                        def remote = getRemoteConfig('192.168.44.102', USER, PASSWORD)
                        def filePath = 'D:\\\\webGame\\\\Game\\\\TMD_mobile\\\\data\\\\iostesting\\\\Inanna\\\\InannaLua\\\\WebEnvironment.xml'
                        def oldContent = params.ENVIRONMENT_TYPE == 'production' ? '<type>iostesting</type>' : '<type>production</type>'
                        def newContent = "<type>${params.ENVIRONMENT_TYPE}</type>"

                        echo "Changing WebEnvironment.xml from ${oldContent} to ${newContent}"

                        def command = "powershell -Command \"(Get-Content ${filePath}).replace('${oldContent}', '${newContent}') | Set-Content ${filePath}\""
                        sshCommand remote: remote, command: command
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
                        def remote = getRemoteConfig('192.168.44.102', USER, PASSWORD)
                        if (params.DEPLOY_TO_CDN) {
                            echo "Deploying to CDN..."
                            // 在此添加部署到 CDN 的命令
                        }
                        if (params.DEPLOY_TO_GCP) {
                            echo "Deploying to GCP..."
                            // 在此添加部署到 GCP 的命令
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            emailext(
                subject: "${currentBuild.currentResult} Deployment Notification",
                body: "${currentBuild.currentResult}, Environment Type: ${params.ENVIRONMENT_TYPE}, Deployment Targets: ${getDeploymentTargets()}",
                to: "${params.NAME}@igs.com.tw"
            )
        }
    }
}

// Helper functions
def getRemoteConfig(host, user, password) {
    def remote = [:]
    remote.name = 'default' // 添加了 'name' 字段
    remote.host = host
    remote.user = user
    remote.password = password
    remote.allowAnyHosts = true
    return remote
}


def getDeploymentTargets() {
    def targets = []
    if (params.DEPLOY_TO_CDN) targets.add('CDN')
    if (params.DEPLOY_TO_GCP) targets.add('GCP')
    return targets.join(' and ')
}
